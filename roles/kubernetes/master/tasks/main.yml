---
- name: Copy kubectl bash completion
  copy:
    src: kubectl_bash_completion.sh
    dest: /etc/bash_completion.d/kubectl.sh
  when: ansible_os_family in ["Debian","RedHat"]

- name: Copy kube-apiserver binary
  command: rsync -piu "{{ local_release_dir }}/kubernetes/bin/kube-apiserver" "{{ bin_dir }}/kube-apiserver"
  register: kube_apiserver_copy
  changed_when: false

- name: Copy kubectl binary
  command: rsync -piu "{{ local_release_dir }}/kubernetes/bin/kubectl" "{{ bin_dir }}/kubectl"
  changed_when: false

- name: install | Write kube-apiserver systemd init file
  template:
    src: "kube-apiserver.service.j2"
    dest: "/etc/systemd/system/kube-apiserver.service"
    backup: yes
  when: ansible_service_mgr == "systemd"
  notify: restart kube-apiserver

- name: install | Write kube-apiserver initd script
  template:
    src: "deb-kube-apiserver.initd.j2"
    dest: "/etc/init.d/kube-apiserver"
    owner: root
    mode: 0755
    backup: yes
  when: ansible_service_mgr in ["sysvinit","upstart"] and ansible_os_family == "Debian"

- name: Write kube-apiserver config file
  template:
    src: "kube-apiserver.j2"
    dest: "{{ kube_config_dir }}/kube-apiserver.env"
    backup: yes
  notify: restart kube-apiserver

- name: Allow apiserver to bind on both secure and insecure ports
  shell: setcap cap_net_bind_service+ep {{ bin_dir }}/kube-apiserver
  changed_when: false

- meta: flush_handlers

- include: start.yml
  with_items: "{{ groups['kube-master'] }}"
  when: "{{ hostvars[item].inventory_hostname == inventory_hostname }}"

# Create kube-system namespace
- name: copy 'kube-system' namespace manifest
  copy: src=system-namespace.yml dest=/etc/kubernetes/kube-system-ns.yml
  run_once: yes
  when: inventory_hostname == groups['kube-master'][0]

- name: Check if kube-system exists
  command: "{{ bin_dir }}/kubectl get ns kube-system"
  register: 'kubesystem'
  changed_when: False
  ignore_errors: yes
  run_once: yes

- name: wait for the apiserver to be running
  wait_for:
    port: "{{kube_apiserver_insecure_port}}"
    timeout: 60

- name: Create 'kube-system' namespace
  command: "{{ bin_dir }}/kubectl create -f /etc/kubernetes/kube-system-ns.yml"
  changed_when: False
  when: kubesystem|failed and inventory_hostname == groups['kube-master'][0]

# Write manifests
- name: Write kube-controller-manager manifest
  template:
    src: manifests/kube-controller-manager.manifest.j2
    dest: "{{ kube_manifest_dir }}/kube-controller-manager.manifest"

- name: Write kube-scheduler manifest
  template:
    src: manifests/kube-scheduler.manifest.j2
    dest: "{{ kube_manifest_dir }}/kube-scheduler.manifest"

- name: restart kubelet
  service:
    name: kubelet
    state: restarted
  changed_when: false

- pause: prompt="Please wait until the cluster has started and the 'controller-manager' is running (only need to wait on first run)"

 # Setup DNS
- name: Write SkyDNS pod file
  template: src=skydns-rc.yaml.j2 dest=/etc/kubernetes/skydns-rc.yaml
  when: inventory_hostname == groups['kube-master'][0]

- name: Write SkyDNS service file
  template: src=skydns-svc.yaml.j2 dest=/etc/kubernetes/skydns-svc.yaml
  when: inventory_hostname == groups['kube-master'][0]

- name: Check that the DNS pod exists
  shell: "{{ bin_dir }}/kubectl get rc kube-dns --namespace=kube-system"
  register: has_dns_pod
  failed_when: false
  changed_when: false

- name: Create SkyDNS pod
  shell: "{{ bin_dir }}/kubectl create -f /etc/kubernetes/skydns-rc.yaml"
  when: inventory_hostname == groups['kube-master'][0] and has_dns_pod.rc != 0

- name: Update DNS replication service
  shell: "{{ bin_dir }}/kubectl update -f /etc/kubernetes/skydns-rc.yaml"
  when: inventory_hostname == groups['kube-master'][0] and has_dns_pod.rc == 0

- name: Check that the DNS service exists
  shell: "{{ bin_dir }}/kubectl get service kube-dns --namespace=kube-system"
  register: has_dns_service
  failed_when: false
  changed_when: false

- name: Create SkyDNS service
  shell: "{{ bin_dir }}/kubectl create -f /etc/kubernetes/skydns-svc.yaml"
  when: inventory_hostname == groups['kube-master'][0] and has_dns_service.rc != 0

- name: Update SkyDNS service
  shell: "{{ bin_dir }}/kubectl update -f /etc/kubernetes/skydns-svc.yaml"
  when: inventory_hostname == groups['kube-master'][0] and has_dns_service.rc == 0

# Enable Network Policy Resource
- name: copy 'Network Policy' resource manifest
  copy: src=network-policy.yml dest=/etc/kubernetes/kube-network-policy.yml
  run_once: yes
  when: inventory_hostname == groups['kube-master'][0]

- name: Check that the Network Policy Resource exists
  shell: "{{ bin_dir }}/kubectl get thirdpartyresources.extensions network-policy.net.alpha.kubernetes.io"
  register: network_policy_enabled
  failed_when: false
  changed_when: false

- name: Enable Third Party Network Policy Resource
  command: "{{ bin_dir }}/kubectl create -f /etc/kubernetes/kube-network-policy.yml"
  when: inventory_hostname == groups['kube-master'][0] and network_policy_enabled.rc !=0

# Enable Network Policy Agent

- name: copy 'calico-system' namespace manifest
  copy: src=calico-namespace.yml dest=/etc/kubernetes/calico-system-ns.yml
  run_once: yes
  when: kube_network_plugin == 'calico' and inventory_hostname == groups['kube-master'][0]

- name: Check if "calico-system" namespace exists
  command: "{{ bin_dir }}/kubectl get ns calico-system"
  register: 'calico_system_ns_enabled'
  failed_when: false
  changed_when: false

- name: Create 'calico-system' namespace
  command: "{{ bin_dir }}/kubectl create -f /etc/kubernetes/calico-system-ns.yml"
  changed_when: False
  when: kube_network_plugin == 'calico' and inventory_hostname == groups['kube-master'][0] and calico_system_ns_enabled.rc !=0

- name: Write Calico Policy Agent RC file
  template: src=calico-policy-agent-rc.yaml.j2 dest=/etc/kubernetes/calico-policy-agent-rc.yaml
  when: kube_network_plugin == 'calico' and inventory_hostname == groups['kube-master'][0]

- name: Check that the calico-policy-agent RC exists
  shell: "{{ bin_dir }}/kubectl get rc calico-policy-agent --namespace=calico-system"
  register: calico_policy_agent_exists
  failed_when: false
  changed_when: false

- name: Create calico-policy-agent RC
  shell: "{{ bin_dir }}/kubectl create -f /etc/kubernetes/calico-policy-agent-rc.yaml"
  when: kube_network_plugin == 'calico' and inventory_hostname == groups['kube-master'][0] and calico_policy_agent_exists.rc != 0

- name: Update calico-policy-agent RC
  shell: "{{ bin_dir }}/kubectl update -f /etc/kubernetes/calico-policy-agent-rc.yaml"
  when: kube_network_plugin == 'calico' and inventory_hostname == groups['kube-master'][0] and calico_policy_agent_exists.rc == 0
